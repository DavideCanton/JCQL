<query> ::= { builder.reset() }
			<or_term> [ OR <or_term> { builder.build(OR) } ] *
			{ builder.getQuery() }
			
<or_term> ::= <and_term> [ AND <and_term> { builder.build(AND) } ] *

<and_term> ::= <expression> [ RELOP { <and_term>.relop = createRelop() } <expression> { builder.build(<and_term>.relop) } ]
			   | NOT <and_term> { builder.build(NOT) }
			   
<expression> ::= <add_term> [ ( ADD { <expression>.op = ADD } | SUB { <expression>.op = SUB } ) 
				 <add_term> { builder.build( <expression>.op ) } ] *
				 
<add_term> ::= <mul_term> [ ( MUL { <add_term>.op = MUL } | DIV { <add_term>.op = DIV } | MOD { <add_term>.op = MOD } ) 
			   <mul_term> { builder.build( <add_term>.op ) } ] *
			   
<mul_term> ::= ( { <mul_term>.segno = 1 } ( ADD | eps | SUB { <mul_term>.segno = -1 } ) NUM { builder.build(new Costante(lex.getValue()*<mul_term>.segno)) }
			   | <value>
			   | ( NUM { <mul_term>.op = NUM } | STR { <mul_term>.op = STR } | SIZE { <mul_term>.op = SIZE } ) OPAR <expression> CPAR { builder.build(<mul_term>.op) }
			   | OPAR <query> CPAR
			   | STRING_CONST { builder.build(new StringCostant(lex.getString())) } 
			   | NULL { builder.build(new Null()) }
			   	
<value> ::= <firstvalue> [ DOT <othervalues> ] *

<firstvalue> ::= ( ID { <firstvalue>.name = ID.val() } 
				 | THIS { lex.nextToken() } )			
				 [ OSPAR <expression> CSPAR { builder.build(new ArrayIndexOperator()) } ]
				 { builder.build(new FieldName(<firstvalue>.name)); builder.build(new ExtractFieldOperator()) }
				 
<othervalues> ::= ID { <othervalues>.name = ID.val() }
				 [ OSPAR <expression> CSPAR { builder.build(new ArrayIndexOperator()) } ]
				 { builder.build(new FieldName(<othervalues>.name)); builder.build(new ExtractFieldOperator()) }